{
  "version": 3,
  "sources": ["../../pocketbase/src/ClientResponseError.ts", "../../pocketbase/src/stores/utils/cookie.ts", "../../pocketbase/src/stores/utils/jwt.ts", "../../pocketbase/src/stores/BaseAuthStore.ts", "../../pocketbase/src/stores/LocalAuthStore.ts", "../../pocketbase/src/services/utils/BaseService.ts", "../../pocketbase/src/services/SettingsService.ts", "../../pocketbase/src/services/utils/CrudService.ts", "../../pocketbase/src/services/utils/legacy.ts", "../../pocketbase/src/services/utils/refresh.ts", "../../pocketbase/src/services/AdminService.ts", "../../pocketbase/src/services/utils/options.ts", "../../pocketbase/src/services/RealtimeService.ts", "../../pocketbase/src/services/RecordService.ts", "../../pocketbase/src/services/CollectionService.ts", "../../pocketbase/src/services/LogService.ts", "../../pocketbase/src/services/HealthService.ts", "../../pocketbase/src/services/FileService.ts", "../../pocketbase/src/services/BackupService.ts", "../../pocketbase/src/Client.ts", "../../pocketbase/src/stores/AsyncAuthStore.ts"],
  "sourcesContent": ["/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport class ClientResponseError extends Error {\n    url: string = \"\";\n    status: number = 0;\n    response: { [key: string]: any } = {};\n    isAbort: boolean = false;\n    originalError: any = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        // Set the prototype explicitly.\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\n\n        if (errData !== null && typeof errData === \"object\") {\n            this.url = typeof errData.url === \"string\" ? errData.url : \"\";\n            this.status = typeof errData.status === \"number\" ? errData.status : 0;\n            this.isAbort = !!errData.isAbort;\n            this.originalError = errData.originalError;\n\n            if (errData.response !== null && typeof errData.response === \"object\") {\n                this.response = errData.response;\n            } else if (errData.data !== null && typeof errData.data === \"object\") {\n                this.response = errData.data;\n            } else {\n                this.response = {};\n            }\n        }\n\n        if (!this.originalError && !(errData instanceof ClientResponseError)) {\n            this.originalError = errData;\n        }\n\n        if (typeof DOMException !== \"undefined\" && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.response?.message;\n        if (!this.message) {\n            if (this.isAbort) {\n                this.message =\n                    \"The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.\";\n            } else if (this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\")) {\n                this.message =\n                    \"Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).\";\n            } else {\n                this.message = \"Something went wrong while processing your request.\";\n            }\n        }\n    }\n\n    /**\n     * Alias for `this.response` to preserve the backward compatibility.\n     */\n    get data() {\n        return this.response;\n    }\n\n    /**\n     * Make a POJO's copy of the current error class instance.\n     * @see https://github.com/vuex-orm/vuex-orm/issues/255\n     */\n    toJSON() {\n        return { ...this };\n    }\n}\n", "/**\n * -------------------------------------------------------------------\n * Simple cookie parse and serialize utilities mostly based on the\n * node module https://github.com/jshttp/cookie.\n * -------------------------------------------------------------------\n */\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nexport interface ParseOptions {\n    decode?: (val: string) => string;\n}\n\n/**\n * Parses the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n */\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any } {\n    const result: { [key: string]: any } = {};\n\n    if (typeof str !== \"string\") {\n        return result;\n    }\n\n    const opt = Object.assign({}, options || {});\n    const decode = opt.decode || defaultDecode;\n\n    let index = 0;\n    while (index < str.length) {\n        const eqIdx = str.indexOf(\"=\", index);\n\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n\n        let endIdx = str.indexOf(\";\", index);\n\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n            continue;\n        }\n\n        const key = str.slice(index, eqIdx).trim();\n\n        // only assign once\n        if (undefined === result[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n\n            try {\n                result[key] = decode(val);\n            } catch (_) {\n                result[key] = val; // no decoding\n            }\n        }\n\n        index = endIdx + 1;\n    }\n\n    return result;\n}\n\nexport interface SerializeOptions {\n    encode?: (val: string | number | boolean) => string;\n    maxAge?: number;\n    domain?: string;\n    path?: string;\n    expires?: Date;\n    httpOnly?: boolean;\n    secure?: boolean;\n    priority?: string;\n    sameSite?: boolean | string;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * ```js\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\n * ```\n */\nexport function cookieSerialize(\n    name: string,\n    val: string,\n    options?: SerializeOptions,\n): string {\n    const opt = Object.assign({}, options || {});\n    const encode = opt.encode || defaultEncode;\n\n    if (!fieldContentRegExp.test(name)) {\n        throw new TypeError(\"argument name is invalid\");\n    }\n\n    const value = encode(val);\n\n    if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError(\"argument val is invalid\");\n    }\n\n    let result = name + \"=\" + value;\n\n    if (opt.maxAge != null) {\n        const maxAge = opt.maxAge - 0;\n\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n            throw new TypeError(\"option maxAge is invalid\");\n        }\n\n        result += \"; Max-Age=\" + Math.floor(maxAge);\n    }\n\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError(\"option domain is invalid\");\n        }\n\n        result += \"; Domain=\" + opt.domain;\n    }\n\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError(\"option path is invalid\");\n        }\n\n        result += \"; Path=\" + opt.path;\n    }\n\n    if (opt.expires) {\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\n            throw new TypeError(\"option expires is invalid\");\n        }\n\n        result += \"; Expires=\" + opt.expires.toUTCString();\n    }\n\n    if (opt.httpOnly) {\n        result += \"; HttpOnly\";\n    }\n\n    if (opt.secure) {\n        result += \"; Secure\";\n    }\n\n    if (opt.priority) {\n        const priority =\n            typeof opt.priority === \"string\" ? opt.priority.toLowerCase() : opt.priority;\n\n        switch (priority) {\n            case \"low\":\n                result += \"; Priority=Low\";\n                break;\n            case \"medium\":\n                result += \"; Priority=Medium\";\n                break;\n            case \"high\":\n                result += \"; Priority=High\";\n                break;\n            default:\n                throw new TypeError(\"option priority is invalid\");\n        }\n    }\n\n    if (opt.sameSite) {\n        const sameSite =\n            typeof opt.sameSite === \"string\" ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n        switch (sameSite) {\n            case true:\n                result += \"; SameSite=Strict\";\n                break;\n            case \"lax\":\n                result += \"; SameSite=Lax\";\n                break;\n            case \"strict\":\n                result += \"; SameSite=Strict\";\n                break;\n            case \"none\":\n                result += \"; SameSite=None\";\n                break;\n            default:\n                throw new TypeError(\"option sameSite is invalid\");\n        }\n    }\n\n    return result;\n}\n\n/**\n * Default URL-decode string value function.\n * Optimized to skip native call when no `%`.\n */\nfunction defaultDecode(val: string): string {\n    return val.indexOf(\"%\") !== -1 ? decodeURIComponent(val) : val;\n}\n\n/**\n * Default URL-encode value function.\n */\nfunction defaultEncode(val: string | number | boolean): string {\n    return encodeURIComponent(val);\n}\n\n/**\n * Determines if value is a Date.\n */\nfunction isDate(val: any): boolean {\n    return Object.prototype.toString.call(val) === \"[object Date]\" || val instanceof Date;\n}\n", "let atobPolyfill: Function;\nif (typeof atob === \"function\") {\n    atobPolyfill = atob;\n} else {\n    /**\n     * The code was extracted from:\n     * https://github.com/davidchambers/Base64.js\n     */\n    atobPolyfill = (input: any) => {\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n        let str = String(input).replace(/=+$/, \"\");\n        if (str.length % 4 == 1) {\n            throw new Error(\n                \"'atob' failed: The string to be decoded is not correctly encoded.\",\n            );\n        }\n\n        for (\n            // initialize result and counters\n            var bc = 0, bs, buffer, idx = 0, output = \"\";\n            // get next character\n            (buffer = str.charAt(idx++));\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer &&\n            ((bs = bc % 4 ? (bs as any) * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4)\n                ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n                : 0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n    };\n}\n\n/**\n * Returns JWT token's payload data.\n */\nexport function getTokenPayload(token: string): { [key: string]: any } {\n    if (token) {\n        try {\n            const encodedPayload = decodeURIComponent(\n                atobPolyfill(token.split(\".\")[1])\n                    .split(\"\")\n                    .map(function (c: string) {\n                        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n                    })\n                    .join(\"\"),\n            );\n\n            return JSON.parse(encodedPayload) || {};\n        } catch (e) {}\n    }\n\n    return {};\n}\n\n/**\n * Checks whether a JWT token is expired or not.\n * Tokens without `exp` payload key are considered valid.\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\n *\n * @param token The token to check.\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\n */\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\n    let payload = getTokenPayload(token);\n\n    if (\n        Object.keys(payload).length > 0 &&\n        (!payload.exp || payload.exp - expirationThreshold > Date.now() / 1000)\n    ) {\n        return false;\n    }\n\n    return true;\n}\n", "import { cookieParse, cookieSerialize, SerializeOptions } from \"@/stores/utils/cookie\";\nimport { isTokenExpired, getTokenPayload } from \"@/stores/utils/jwt\";\n\nexport type AuthModel = { [key: string]: any } | null;\n\nexport type OnStoreChangeFunc = (token: string, model: AuthModel) => void;\n\nconst defaultCookieKey = \"pb_auth\";\n\n/**\n * Base AuthStore class that is intended to be extended by all other\n * PocketBase AuthStore implementations.\n */\nexport abstract class BaseAuthStore {\n    protected baseToken: string = \"\";\n    protected baseModel: AuthModel = null;\n\n    private _onChangeCallbacks: Array<OnStoreChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get model(): AuthModel {\n        return this.baseModel;\n    }\n\n    /**\n     * Loosely checks if the store has valid token (aka. existing and unexpired exp claim).\n     */\n    get isValid(): boolean {\n        return !isTokenExpired(this.token);\n    }\n\n    /**\n     * Checks whether the current store state is for admin authentication.\n     */\n    get isAdmin(): boolean {\n        return getTokenPayload(this.token).type === \"admin\";\n    }\n\n    /**\n     * Checks whether the current store state is for auth record authentication.\n     */\n    get isAuthRecord(): boolean {\n        return getTokenPayload(this.token).type === \"authRecord\";\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, model?: AuthModel): void {\n        this.baseToken = token || \"\";\n        this.baseModel = model || null;\n\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = \"\";\n        this.baseModel = null;\n        this.triggerChange();\n    }\n\n    /**\n     * Parses the provided cookie string and updates the store state\n     * with the cookie's token and model data.\n     *\n     * NB! This function doesn't validate the token or its data.\n     * Usually this isn't a concern if you are interacting only with the\n     * PocketBase API because it has the proper server-side security checks in place,\n     * but if you are using the store `isValid` state for permission controls\n     * in a node server (eg. SSR), then it is recommended to call `authRefresh()`\n     * after loading the cookie to ensure an up-to-date token and model state.\n     * For example:\n     *\n     * ```js\n     * pb.authStore.loadFromCookie(\"cookie string...\");\n     *\n     * try {\n     *     // get an up-to-date auth store state by veryfing and refreshing the loaded auth model (if any)\n     *     pb.authStore.isValid && await pb.collection('users').authRefresh();\n     * } catch (_) {\n     *     // clear the auth store on failed refresh\n     *     pb.authStore.clear();\n     * }\n     * ```\n     */\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\n        const rawData = cookieParse(cookie || \"\")[key] || \"\";\n\n        let data: { [key: string]: any } = {};\n        try {\n            data = JSON.parse(rawData);\n            // normalize\n            if (typeof data === null || typeof data !== \"object\" || Array.isArray(data)) {\n                data = {};\n            }\n        } catch (_) {}\n\n        this.save(data.token || \"\", data.model || null);\n    }\n\n    /**\n     * Exports the current store state as cookie string.\n     *\n     * By default the following optional attributes are added:\n     * - Secure\n     * - HttpOnly\n     * - SameSite=Strict\n     * - Path=/\n     * - Expires={the token expiration date}\n     *\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\n     * strip the model data to the bare minimum to try to fit within the\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\n     */\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\n        const defaultOptions: SerializeOptions = {\n            secure: true,\n            sameSite: true,\n            httpOnly: true,\n            path: \"/\",\n        };\n\n        // extract the token expiration date\n        const payload = getTokenPayload(this.token);\n        if (payload?.exp) {\n            defaultOptions.expires = new Date(payload.exp * 1000);\n        } else {\n            defaultOptions.expires = new Date(\"1970-01-01\");\n        }\n\n        // merge with the user defined options\n        options = Object.assign({}, defaultOptions, options);\n\n        const rawData = {\n            token: this.token,\n            model: this.model ? JSON.parse(JSON.stringify(this.model)) : null,\n        };\n\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\n\n        const resultLength =\n            typeof Blob !== \"undefined\" ? new Blob([result]).size : result.length;\n\n        // strip down the model data to the bare minimum\n        if (rawData.model && resultLength > 4096) {\n            rawData.model = { id: rawData?.model?.id, email: rawData?.model?.email };\n            const extraProps = [\"collectionId\", \"username\", \"verified\"];\n            for (const prop in this.model) {\n                if (extraProps.includes(prop)) {\n                    rawData.model[prop] = this.model[prop];\n                }\n            }\n            result = cookieSerialize(key, JSON.stringify(rawData), options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * You can set the `fireImmediately` argument to true in order to invoke\n     * the provided callback right after registration.\n     *\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\n     */\n    onChange(callback: OnStoreChangeFunc, fireImmediately = false): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        if (fireImmediately) {\n            callback(this.token, this.model);\n        }\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i]; // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        };\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.model);\n        }\n    }\n}\n", "import { BaseAuthStore, AuthModel } from \"@/stores/BaseAuthStore\";\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (eg. in node env).\n */\nexport class LocalAuthStore extends BaseAuthStore {\n    private storageFallback: { [key: string]: any } = {};\n    private storageKey: string;\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n\n        this._bindStorageEvent();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || \"\";\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get model(): AuthModel {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.model || null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model?: AuthModel) {\n        this._storageSet(this.storageKey, {\n            token: token,\n            model: model,\n        });\n\n        super.save(token, model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            const rawValue = window.localStorage.getItem(key) || \"\";\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) {\n                // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback\n        return this.storageFallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== \"string\") {\n                normalizedVal = JSON.stringify(value);\n            }\n            window.localStorage.setItem(key, normalizedVal);\n        } else {\n            // store in fallback\n            this.storageFallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            window.localStorage?.removeItem(key);\n        }\n\n        // delete from fallback\n        delete this.storageFallback[key];\n    }\n\n    /**\n     * Updates the current store state on localStorage change.\n     */\n    private _bindStorageEvent() {\n        if (\n            typeof window === \"undefined\" ||\n            !window?.localStorage ||\n            !window.addEventListener\n        ) {\n            return;\n        }\n\n        window.addEventListener(\"storage\", (e) => {\n            if (e.key != this.storageKey) {\n                return;\n            }\n\n            const data = this._storageGet(this.storageKey) || {};\n\n            super.save(data.token || \"\", data.model || null);\n        });\n    }\n}\n", "import Client from \"@/Client\";\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport abstract class BaseService {\n    readonly client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n", "import { BaseService } from \"@/services/utils/BaseService\";\nimport { CommonOptions } from \"@/services/utils/options\";\n\ninterface appleClientSecret {\n    secret: string;\n}\n\nexport class SettingsService extends BaseService {\n    /**\n     * Fetch all available app settings.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getAll(options?: CommonOptions): Promise<{ [key: string]: any }> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings\", options);\n    }\n\n    /**\n     * Bulk updates app settings.\n     *\n     * @throws {ClientResponseError}\n     */\n    async update(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<{ [key: string]: any }> {\n        options = Object.assign(\n            {\n                method: \"PATCH\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings\", options);\n    }\n\n    /**\n     * Performs a S3 filesystem connection test.\n     *\n     * The currently supported `filesystem` are \"storage\" and \"backups\".\n     *\n     * @throws {ClientResponseError}\n     */\n    async testS3(\n        filesystem: string = \"storage\",\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    filesystem: filesystem,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/test/s3\", options).then(() => true);\n    }\n\n    /**\n     * Sends a test email.\n     *\n     * The possible `emailTemplate` values are:\n     * - verification\n     * - password-reset\n     * - email-change\n     *\n     * @throws {ClientResponseError}\n     */\n    async testEmail(\n        toEmail: string,\n        emailTemplate: string,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    email: toEmail,\n                    template: emailTemplate,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/test/email\", options).then(() => true);\n    }\n\n    /**\n     * Generates a new Apple OAuth2 client secret.\n     *\n     * @throws {ClientResponseError}\n     */\n    async generateAppleClientSecret(\n        clientId: string,\n        teamId: string,\n        keyId: string,\n        privateKey: string,\n        duration: number,\n        options?: CommonOptions,\n    ): Promise<appleClientSecret> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    clientId,\n                    teamId,\n                    keyId,\n                    privateKey,\n                    duration,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/apple/generate-client-secret\", options);\n    }\n}\n", "import { BaseService } from \"@/services/utils/BaseService\";\nimport { ClientResponseError } from \"@/ClientResponseError\";\nimport { ListResult } from \"@/services/utils/dtos\";\nimport { CommonOptions, ListOptions, FullListOptions } from \"@/services/utils/options\";\n\nexport abstract class CrudService<M> extends BaseService {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract get baseCrudPath(): string;\n\n    /**\n     * Response data decoder.\n     */\n    decode<T = M>(data: { [key: string]: any }): T {\n        return data as T;\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once\n     * (by default 500 items per request; to change it set the `batch` query param).\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList<T = M>(options?: FullListOptions): Promise<Array<T>>;\n\n    /**\n     * Legacy version of getFullList with explicitly specified batch size.\n     */\n    async getFullList<T = M>(batch?: number, options?: ListOptions): Promise<Array<T>>;\n\n    async getFullList<T = M>(\n        batchOrqueryParams?: number | FullListOptions,\n        options?: ListOptions,\n    ): Promise<Array<T>> {\n        if (typeof batchOrqueryParams == \"number\") {\n            return this._getFullList<T>(batchOrqueryParams, options);\n        }\n\n        options = Object.assign({}, batchOrqueryParams, options);\n\n        let batch = 500;\n        if (options.batch) {\n            batch = options.batch;\n            delete options.batch;\n        }\n\n        return this._getFullList<T>(batch, options);\n    }\n\n    /**\n     * Returns paginated items list.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getList<T = M>(\n        page = 1,\n        perPage = 30,\n        options?: ListOptions,\n    ): Promise<ListResult<T>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        options.query = Object.assign(\n            {\n                page: page,\n                perPage: perPage,\n            },\n            options.query,\n        );\n\n        return this.client.send(this.baseCrudPath, options).then((responseData: any) => {\n            responseData.items =\n                responseData.items?.map((item: any) => {\n                    return this.decode<T>(item);\n                }) || [];\n\n            return responseData;\n        });\n    }\n\n    /**\n     * Returns the first found item by the specified filter.\n     *\n     * Internally it calls `getList(1, 1, { filter, skipTotal })` and\n     * returns the first found item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * For consistency with `getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFirstListItem<T = M>(filter: string, options?: CommonOptions): Promise<T> {\n        options = Object.assign(\n            {\n                requestKey: \"one_by_filter_\" + this.baseCrudPath + \"_\" + filter,\n            },\n            options,\n        );\n\n        options.query = Object.assign(\n            {\n                filter: filter,\n                skipTotal: 1,\n            },\n            options.query,\n        );\n\n        return this.getList<T>(1, 1, options).then((result) => {\n            if (!result?.items?.length) {\n                throw new ClientResponseError({\n                    status: 404,\n                    response: {\n                        code: 404,\n                        message: \"The requested resource wasn't found.\",\n                        data: {},\n                    },\n                });\n            }\n\n            return result.items[0];\n        });\n    }\n\n    /**\n     * Returns single item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * If `id` is empty it will throw a 404 error.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getOne<T = M>(id: string, options?: CommonOptions): Promise<T> {\n        if (!id) {\n            throw new ClientResponseError({\n                url: this.client.buildUrl(this.baseCrudPath + \"/\"),\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"Missing required record id.\",\n                    data: {},\n                },\n            });\n        }\n\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Creates a new item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async create<T = M>(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath, options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Updates an existing item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async update<T = M>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign(\n            {\n                method: \"PATCH\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     *\n     * @throws {ClientResponseError}\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then(() => true);\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList<T = M>(\n        batchSize = 500,\n        options?: ListOptions,\n    ): Promise<Array<T>> {\n        options = options || {};\n        options.query = Object.assign(\n            {\n                skipTotal: 1,\n            },\n            options.query,\n        );\n\n        let result: Array<T> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this.getList(page, batchSize || 500, options).then((list) => {\n                const castedList = list as any as ListResult<T>;\n                const items = castedList.items;\n\n                result = result.concat(items);\n\n                if (items.length == list.perPage) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        };\n\n        return request(1);\n    }\n}\n", "import { SendOptions } from \"@/services/utils/options\";\n\nexport function normalizeLegacyOptionsArgs(\n    legacyWarn: string,\n    baseOptions: SendOptions,\n    bodyOrOptions?: any,\n    query?: any,\n): SendOptions {\n    const hasBodyOrOptions = typeof bodyOrOptions !== \"undefined\";\n    const hasQuery = typeof query !== \"undefined\";\n\n    if (!hasQuery && !hasBodyOrOptions) {\n        return baseOptions;\n    }\n\n    if (hasQuery) {\n        console.warn(legacyWarn);\n        baseOptions.body = Object.assign({}, baseOptions.body, bodyOrOptions);\n        baseOptions.query = Object.assign({}, baseOptions.query, query);\n\n        return baseOptions;\n    }\n\n    return Object.assign(baseOptions, bodyOrOptions);\n}\n", "import Client from \"@/Client\";\nimport { isTokenExpired } from \"@/stores/utils/jwt\";\n\n// reset previous auto refresh registrations\nexport function resetAutoRefresh(client: Client) {\n    (client as any)._resetAutoRefresh?.();\n}\n\nexport function registerAutoRefresh(\n    client: Client,\n    threshold: number,\n    refreshFunc: () => Promise<any>,\n    reauthenticateFunc: () => Promise<any>,\n) {\n    resetAutoRefresh(client);\n\n    const oldBeforeSend = client.beforeSend;\n    const oldModel = client.authStore.model;\n\n    // unset the auto refresh in case the auth store was cleared\n    // OR a new model was authenticated\n    const unsubStoreChange = client.authStore.onChange((newToken, model) => {\n        if (\n            !newToken ||\n            model?.id != oldModel?.id ||\n            // check the collection id in case an admin and auth record share the same id\n            ((model?.collectionId || oldModel?.collectionId) &&\n                model?.collectionId != oldModel?.collectionId)\n        ) {\n            resetAutoRefresh(client);\n        }\n    });\n\n    // initialize a reset function and attach it dynamically to the client\n    (client as any)._resetAutoRefresh = function () {\n        unsubStoreChange();\n        client.beforeSend = oldBeforeSend;\n        delete (client as any)._resetAutoRefresh;\n    };\n\n    client.beforeSend = async (url, sendOptions) => {\n        const oldToken = client.authStore.token;\n\n        if (sendOptions.query?.autoRefresh) {\n            return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n        }\n\n        let isValid = client.authStore.isValid;\n        if (\n            // is loosely valid\n            isValid &&\n            // but it is going to expire in the next \"threshold\" seconds\n            isTokenExpired(client.authStore.token, threshold)\n        ) {\n            try {\n                await refreshFunc();\n            } catch (_) {\n                isValid = false;\n            }\n        }\n\n        // still invalid -> reauthenticate\n        if (!isValid) {\n            await reauthenticateFunc();\n        }\n\n        // the request wasn't sent with a custom token\n        const headers = sendOptions.headers || {};\n        for (let key in headers) {\n            if (\n                key.toLowerCase() == \"authorization\" &&\n                // the request wasn't sent with a custom token\n                oldToken == headers[key] &&\n                client.authStore.token\n            ) {\n                // set the latest store token\n                headers[key] = client.authStore.token;\n                break;\n            }\n        }\n        sendOptions.headers = headers;\n\n        return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n    };\n}\n", "import { CrudService } from \"@/services/utils/CrudService\";\nimport { AdminModel } from \"@/services/utils/dtos\";\nimport { AuthOptions, CommonOptions } from \"@/services/utils/options\";\nimport { normalizeLegacyOptionsArgs } from \"@/services/utils/legacy\";\nimport { registerAutoRefresh, resetAutoRefresh } from \"@/services/utils/refresh\";\n\nexport interface AdminAuthResponse {\n    [key: string]: any;\n\n    token: string;\n    admin: AdminModel;\n}\n\nexport class AdminService extends CrudService<AdminModel> {\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return \"/api/admins\";\n    }\n\n    // ---------------------------------------------------------------\n    // Post update/delete AuthStore sync\n    // ---------------------------------------------------------------\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    async update<T = AdminModel>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        return super.update(id, bodyParams, options).then((item) => {\n            // update the store state if the updated item id matches with the stored model\n            if (\n                this.client.authStore.model?.id === item.id &&\n                typeof this.client.authStore.model?.collectionId === \"undefined\" // is not record auth\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        return super.delete(id, options).then((success) => {\n            // clear the store state if the deleted item id matches with the stored model\n            if (\n                success &&\n                this.client.authStore.model?.id === id &&\n                typeof this.client.authStore.model?.collectionId === \"undefined\" // is not record auth\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful authorize response.\n     */\n    protected authResponse(responseData: any): AdminAuthResponse {\n        const admin = this.decode(responseData?.admin || {});\n\n        if (responseData?.token && responseData?.admin) {\n            this.client.authStore.save(responseData.token, admin);\n        }\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            token: responseData?.token || \"\",\n            admin: admin,\n        });\n    }\n\n    /**\n     * Authenticate an admin account with its email and password\n     * and returns a new admin token and data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithPassword(\n        email: string,\n        password: string,\n        options?: AuthOptions,\n    ): Promise<AdminAuthResponse>;\n\n    /**\n     * @deprecated\n     * Consider using authWithPassword(email, password, options?).\n     */\n    async authWithPassword(\n        email: string,\n        password: string,\n        body?: any,\n        query?: any,\n    ): Promise<AdminAuthResponse>;\n\n    async authWithPassword(\n        email: string,\n        password: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<AdminAuthResponse> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                identity: email,\n                password: password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authWithPassword(email, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(email, pass, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        const autoRefreshThreshold = options.autoRefreshThreshold;\n        delete options.autoRefreshThreshold;\n\n        // not from auto refresh reauthentication\n        if (!options.autoRefresh) {\n            resetAutoRefresh(this.client);\n        }\n\n        let authData = await this.client.send(\n            this.baseCrudPath + \"/auth-with-password\",\n            options,\n        );\n\n        authData = this.authResponse(authData);\n\n        if (autoRefreshThreshold) {\n            registerAutoRefresh(\n                this.client,\n                autoRefreshThreshold,\n                () => this.authRefresh({ autoRefresh: true }),\n                () =>\n                    this.authWithPassword(\n                        email,\n                        password,\n                        Object.assign({ autoRefresh: true }, options),\n                    ),\n            );\n        }\n\n        return authData;\n    }\n\n    /**\n     * Refreshes the current admin authenticated instance and\n     * returns a new token and admin data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     *\n     * @throws {ClientResponseError}\n     */\n    async authRefresh(options?: CommonOptions): Promise<AdminAuthResponse>;\n\n    /**\n     * @deprecated\n     * Consider using authRefresh(options?).\n     */\n    async authRefresh(body?: any, query?: any): Promise<AdminAuthResponse>;\n\n    async authRefresh(bodyOrOptions?: any, query?: any): Promise<AdminAuthResponse> {\n        let options: any = {\n            method: \"POST\",\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/auth-refresh\", options)\n            .then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends admin password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestPasswordReset(email, options?).\n     */\n    async requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestPasswordReset(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/request-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms admin password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmPasswordReset(\n        resetToken: string,\n        password: string,\n        passwordConfirm: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmPasswordReset(resetToken, password, passwordConfirm, options?).\n     */\n    async confirmPasswordReset(\n        resetToken: string,\n        password: string,\n        passwordConfirm: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmPasswordReset(\n        resetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: resetToken,\n                password: password,\n                passwordConfirm: passwordConfirm,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmPasswordReset(resetToken, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(resetToken, password, passwordConfirm, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/confirm-password-reset\", options)\n            .then(() => true);\n    }\n}\n", "export interface SendOptions extends RequestInit {\n    // for backward compatibility and to minimize the verbosity,\n    // any top-level field that doesn't exist in RequestInit or the\n    // fields below will be treated as query parameter.\n    [key: string]: any;\n\n    /**\n     * Optional custom fetch function to use for sending the request.\n     */\n    fetch?: (url: RequestInfo | URL, config?: RequestInit) => Promise<Response>;\n\n    /**\n     * Custom headers to send with the requests.\n     */\n    headers?: { [key: string]: string };\n\n    /**\n     * The body of the request (serialized automatically for json requests).\n     */\n    body?: any;\n\n    /**\n     * Query parameters that will be appended to the request url.\n     */\n    query?: { [key: string]: any };\n\n    /**\n     * @deprecated use `query` instead\n     *\n     * for backward-compatibility `params` values are merged with `query`,\n     * but this option may get removed in the final v1 release\n     */\n    params?: { [key: string]: any };\n\n    /**\n     * The request identifier that can be used to cancel pending requests.\n     */\n    requestKey?: string | null;\n\n    /**\n     * @deprecated use `requestKey:string` instead\n     */\n    $cancelKey?: string;\n\n    /**\n     * @deprecated use `requestKey:null` instead\n     */\n    $autoCancel?: boolean;\n}\n\nexport interface CommonOptions extends SendOptions {\n    fields?: string;\n}\n\nexport interface ListOptions extends CommonOptions {\n    page?: number;\n    perPage?: number;\n    sort?: string;\n    filter?: string;\n    skipTotal?: boolean;\n}\n\nexport interface FullListOptions extends ListOptions {\n    batch?: number;\n}\n\nexport interface RecordOptions extends CommonOptions {\n    expand?: string;\n}\n\nexport interface RecordListOptions extends ListOptions, RecordOptions {}\n\nexport interface RecordFullListOptions extends FullListOptions, RecordOptions {}\n\nexport interface LogStatsOptions extends CommonOptions {\n    filter?: string;\n}\n\nexport interface FileOptions extends CommonOptions {\n    thumb?: string;\n    download?: boolean;\n}\n\nexport interface AuthOptions extends CommonOptions {\n    /**\n     * If autoRefreshThreshold is set it will take care to auto refresh\n     * when necessary the auth data before each request to ensure that\n     * the auth state is always valid.\n     *\n     * The value must be in seconds, aka. the amount of seconds\n     * that will be subtracted from the current token `exp` claim in order\n     * to determine whether it is going to expire within the specified time threshold.\n     *\n     * For example, if you want to auto refresh the token if it is\n     * going to expire in the next 30mins (or already has expired),\n     * it can be set to `1800`\n     */\n    autoRefreshThreshold?: number;\n}\n\n// -------------------------------------------------------------------\n\n// list of known SendOptions keys (everything else is treated as query param)\nconst knownSendOptionsKeys = [\n    \"requestKey\",\n    \"$cancelKey\",\n    \"$autoCancel\",\n    \"fetch\",\n    \"headers\",\n    \"body\",\n    \"query\",\n    \"params\",\n    // ---,\n    \"cache\",\n    \"credentials\",\n    \"headers\",\n    \"integrity\",\n    \"keepalive\",\n    \"method\",\n    \"mode\",\n    \"redirect\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"signal\",\n    \"window\",\n];\n\n// modifies in place the provided options by moving unknown send options as query parameters.\nexport function normalizeUnknownQueryParams(options?: SendOptions): void {\n    if (!options) {\n        return;\n    }\n\n    options.query = options.query || {};\n    for (let key in options) {\n        if (knownSendOptionsKeys.includes(key)) {\n            continue;\n        }\n\n        options.query[key] = options[key];\n        delete options[key];\n    }\n}\n", "import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseService } from \"@/services/utils/BaseService\";\nimport { SendOptions, normalizeUnknownQueryParams } from \"@/services/utils/options\";\n\ninterface promiseCallbacks {\n    resolve: Function;\n    reject: Function;\n}\n\ntype Subscriptions = { [key: string]: Array<EventListener> };\n\nexport type UnsubscribeFunc = () => Promise<void>;\n\nexport class RealtimeService extends BaseService {\n    clientId: string = \"\";\n\n    private eventSource: EventSource | null = null;\n    private subscriptions: Subscriptions = {};\n    private lastSentSubscriptions: Array<string> = [];\n    private connectTimeoutId: any;\n    private maxConnectTimeout: number = 15000;\n    private reconnectTimeoutId: any;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = Infinity;\n    private predefinedReconnectIntervals: Array<number> = [\n        200, 300, 500, 1000, 1200, 1500, 2000,\n    ];\n    private pendingConnects: Array<promiseCallbacks> = [];\n\n    /**\n     * Returns whether the realtime connection has been established.\n     */\n    get isConnected(): boolean {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n\n    /**\n     * Register the subscription listener.\n     *\n     * You can subscribe multiple times to the same topic.\n     *\n     * If the SSE connection is not started yet,\n     * this method will also initialize it.\n     */\n    async subscribe(\n        topic: string,\n        callback: (data: any) => void,\n        options?: SendOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error(\"topic must be set.\");\n        }\n\n        let key = topic;\n\n        // serialize and append the topic options (if any)\n        if (options) {\n            normalizeUnknownQueryParams(options);\n            const serialized =\n                \"options=\" +\n                encodeURIComponent(\n                    JSON.stringify({ query: options.query, headers: options.headers }),\n                );\n            key += (key.includes(\"?\") ? \"&\" : \"?\") + serialized;\n        }\n\n        const listener = function (e: Event) {\n            const msgEvent = e as MessageEvent;\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        };\n\n        // store the listener\n        if (!this.subscriptions[key]) {\n            this.subscriptions[key] = [];\n        }\n        this.subscriptions[key].push(listener);\n\n        if (!this.isConnected) {\n            // initialize sse connection\n            await this.connect();\n        } else if (this.subscriptions[key].length === 1) {\n            // send the updated subscriptions (if it is the first for the key)\n            await this.submitSubscriptions();\n        } else {\n            // only register the listener\n            this.eventSource?.addEventListener(key, listener);\n        }\n\n        return async (): Promise<void> => {\n            return this.unsubscribeByTopicAndListener(topic, listener);\n        };\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners with the specified topic.\n     *\n     * If `topic` is not provided, then this method will unsubscribe\n     * from all active subscriptions.\n     *\n     * This method is no-op if there are no active subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        let needToSubmit = false;\n\n        if (!topic) {\n            // remove all subscriptions\n            this.subscriptions = {};\n        } else {\n            // remove all listeners related to the topic\n            const subs = this.getSubscriptionsByTopic(topic);\n            for (let key in subs) {\n                if (!this.hasSubscriptionListeners(key)) {\n                    continue; // already unsubscribed\n                }\n\n                for (let listener of this.subscriptions[key]) {\n                    this.eventSource?.removeEventListener(key, listener);\n                }\n                delete this.subscriptions[key];\n\n                // mark for subscriptions change submit if there are no other listeners\n                if (!needToSubmit) {\n                    needToSubmit = true;\n                }\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners starting with the specified topic prefix.\n     *\n     * This method is no-op if there are no active subscriptions with the specified topic prefix.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByPrefix(keyPrefix: string): Promise<void> {\n        let hasAtleastOneTopic = false;\n        for (let key in this.subscriptions) {\n            // \"?\" so that it can be used as end delimiter for the prefix\n            if (!(key + \"?\").startsWith(keyPrefix)) {\n                continue;\n            }\n\n            hasAtleastOneTopic = true;\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            delete this.subscriptions[key];\n        }\n\n        if (!hasAtleastOneTopic) {\n            return; // nothing to unsubscribe from\n        }\n\n        if (this.hasSubscriptionListeners()) {\n            // submit the deleted subscriptions\n            await this.submitSubscriptions();\n        } else {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscriptions matching the specified topic and listener function.\n     *\n     * This method is no-op if there are no active subscription with\n     * the specified topic and listener.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByTopicAndListener(\n        topic: string,\n        listener: EventListener,\n    ): Promise<void> {\n        let needToSubmit = false;\n\n        const subs = this.getSubscriptionsByTopic(topic);\n        for (let key in subs) {\n            if (\n                !Array.isArray(this.subscriptions[key]) ||\n                !this.subscriptions[key].length\n            ) {\n                continue; // already unsubscribed\n            }\n\n            let exist = false;\n            for (let i = this.subscriptions[key].length - 1; i >= 0; i--) {\n                if (this.subscriptions[key][i] !== listener) {\n                    continue;\n                }\n\n                exist = true; // has at least one matching listener\n                delete this.subscriptions[key][i]; // removes the function reference\n                this.subscriptions[key].splice(i, 1); // reindex the array\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            if (!exist) {\n                continue;\n            }\n\n            // remove the key from the subscriptions list if there are no other listeners\n            if (!this.subscriptions[key].length) {\n                delete this.subscriptions[key];\n            }\n\n            // mark for subscriptions change submit if there are no other listeners\n            if (!needToSubmit && !this.hasSubscriptionListeners(key)) {\n                needToSubmit = true;\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    private hasSubscriptionListeners(keyToCheck?: string): boolean {\n        this.subscriptions = this.subscriptions || {};\n\n        // check the specified key\n        if (keyToCheck) {\n            return !!this.subscriptions[keyToCheck]?.length;\n        }\n\n        // check for at least one non-empty subscription\n        for (let key in this.subscriptions) {\n            if (!!this.subscriptions[key]?.length) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private async submitSubscriptions(): Promise<void> {\n        if (!this.clientId) {\n            return; // no client/subscriber\n        }\n\n        // optimistic update\n        this.addAllSubscriptionListeners();\n\n        this.lastSentSubscriptions = this.getNonEmptySubscriptionKeys();\n\n        return this.client\n            .send(\"/api/realtime\", {\n                method: \"POST\",\n                body: {\n                    clientId: this.clientId,\n                    subscriptions: this.lastSentSubscriptions,\n                },\n                requestKey: this.getSubscriptionsCancelKey(),\n            })\n            .catch((err) => {\n                if (err?.isAbort) {\n                    return; // silently ignore aborted pending requests\n                }\n                throw err;\n            });\n    }\n\n    private getSubscriptionsCancelKey(): string {\n        return \"realtime_\" + this.clientId;\n    }\n\n    private getSubscriptionsByTopic(topic: string): Subscriptions {\n        const result: Subscriptions = {};\n\n        // \"?\" so that it can be used as end delimiter for the topic\n        topic = topic.includes(\"?\") ? topic : topic + \"?\";\n\n        for (let key in this.subscriptions) {\n            if ((key + \"?\").startsWith(topic)) {\n                result[key] = this.subscriptions[key];\n            }\n        }\n\n        return result;\n    }\n\n    private getNonEmptySubscriptionKeys(): Array<string> {\n        const result: Array<string> = [];\n\n        for (let key in this.subscriptions) {\n            if (this.subscriptions[key].length) {\n                result.push(key);\n            }\n        }\n\n        return result;\n    }\n\n    private addAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeAllSubscriptionListeners();\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.addEventListener(key, listener);\n            }\n        }\n    }\n\n    private removeAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.removeEventListener(key, listener);\n            }\n        }\n    }\n\n    private async connect(): Promise<void> {\n        if (this.reconnectAttempts > 0) {\n            // immediately resolve the promise to avoid indefinitely\n            // blocking the client during reconnection\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.pendingConnects.push({ resolve, reject });\n\n            if (this.pendingConnects.length > 1) {\n                // all promises will be resolved once the connection is established\n                return;\n            }\n\n            this.initConnect();\n        });\n    }\n\n    private initConnect() {\n        this.disconnect(true);\n\n        // wait up to 15s for connect\n        clearTimeout(this.connectTimeoutId);\n        this.connectTimeoutId = setTimeout(() => {\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout);\n\n        this.eventSource = new EventSource(this.client.buildUrl(\"/api/realtime\"));\n\n        this.eventSource.onerror = (_) => {\n            this.connectErrorHandler(\n                new Error(\"Failed to establish realtime connection.\"),\n            );\n        };\n\n        this.eventSource.addEventListener(\"PB_CONNECT\", (e) => {\n            const msgEvent = e as MessageEvent;\n            this.clientId = msgEvent?.lastEventId;\n\n            this.submitSubscriptions()\n                .then(async () => {\n                    let retries = 3;\n                    while (this.hasUnsentSubscriptions() && retries > 0) {\n                        retries--;\n                        // resubscribe to ensure that the latest topics are submitted\n                        //\n                        // This is needed because missed topics could happen on reconnect\n                        // if after the pending sent `submitSubscriptions()` call another `subscribe()`\n                        // was made before the submit was able to complete.\n                        await this.submitSubscriptions();\n                    }\n                })\n                .then(() => {\n                    for (let p of this.pendingConnects) {\n                        p.resolve();\n                    }\n\n                    // reset connect meta\n                    this.pendingConnects = [];\n                    this.reconnectAttempts = 0;\n                    clearTimeout(this.reconnectTimeoutId);\n                    clearTimeout(this.connectTimeoutId);\n\n                    // propagate the PB_CONNECT event\n                    const connectSubs = this.getSubscriptionsByTopic(\"PB_CONNECT\");\n                    for (let key in connectSubs) {\n                        for (let listener of connectSubs[key]) {\n                            listener(e);\n                        }\n                    }\n                })\n                .catch((err) => {\n                    this.clientId = \"\";\n                    this.connectErrorHandler(err);\n                });\n        });\n    }\n\n    private hasUnsentSubscriptions(): boolean {\n        const latestTopics = this.getNonEmptySubscriptionKeys();\n        if (latestTopics.length != this.lastSentSubscriptions.length) {\n            return true;\n        }\n\n        for (const t of latestTopics) {\n            if (!this.lastSentSubscriptions.includes(t)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private connectErrorHandler(err: any) {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n\n        if (\n            // wasn't previously connected -> direct reject\n            (!this.clientId && !this.reconnectAttempts) ||\n            // was previously connected but the max reconnection limit has been reached\n            this.reconnectAttempts > this.maxReconnectAttempts\n        ) {\n            for (let p of this.pendingConnects) {\n                p.reject(new ClientResponseError(err));\n            }\n            this.pendingConnects = [];\n            this.disconnect();\n            return;\n        }\n\n        // otherwise -> reconnect in the background\n        this.disconnect(true);\n        const timeout =\n            this.predefinedReconnectIntervals[this.reconnectAttempts] ||\n            this.predefinedReconnectIntervals[\n                this.predefinedReconnectIntervals.length - 1\n            ];\n        this.reconnectAttempts++;\n        this.reconnectTimeoutId = setTimeout(() => {\n            this.initConnect();\n        }, timeout);\n    }\n\n    private disconnect(fromReconnect = false): void {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n        this.removeAllSubscriptionListeners();\n        this.client.cancelRequest(this.getSubscriptionsCancelKey());\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n\n        if (!fromReconnect) {\n            this.reconnectAttempts = 0;\n\n            // resolve any remaining connect promises\n            //\n            // this is done to avoid unnecessary throwing errors in case\n            // unsubscribe is called before the pending connect promises complete\n            // (see https://github.com/pocketbase/pocketbase/discussions/2897#discussioncomment-6423818)\n            for (let p of this.pendingConnects) {\n                p.resolve();\n            }\n            this.pendingConnects = [];\n        }\n    }\n}\n", "import Client from \"@/Client\";\nimport { getTokenPayload } from \"@/stores/utils/jwt\";\nimport { CrudService } from \"@/services/utils/CrudService\";\nimport { RealtimeService, UnsubscribeFunc } from \"@/services/RealtimeService\";\nimport { ClientResponseError } from \"@/ClientResponseError\";\nimport { ListResult, RecordModel, ExternalAuthModel } from \"@/services/utils/dtos\";\nimport {\n    SendOptions,\n    CommonOptions,\n    RecordOptions,\n    RecordListOptions,\n    RecordFullListOptions,\n} from \"@/services/utils/options\";\nimport { normalizeLegacyOptionsArgs } from \"@/services/utils/legacy\";\n\nexport interface RecordAuthResponse<T = RecordModel> {\n    /**\n     * The signed PocketBase auth record.\n     */\n    record: T;\n\n    /**\n     * The PocketBase record auth token.\n     *\n     * If you are looking for the OAuth2 access and refresh tokens\n     * they are available under the `meta.accessToken` and `meta.refreshToken` props.\n     */\n    token: string;\n\n    /**\n     * Auth meta data usually filled when OAuth2 is used.\n     */\n    meta?: { [key: string]: any };\n}\n\nexport interface AuthProviderInfo {\n    name: string;\n    displayName: string;\n    state: string;\n    authUrl: string;\n    codeVerifier: string;\n    codeChallenge: string;\n    codeChallengeMethod: string;\n}\n\nexport interface AuthMethodsList {\n    usernamePassword: boolean;\n    emailPassword: boolean;\n    onlyVerified: boolean;\n    authProviders: Array<AuthProviderInfo>;\n}\n\nexport interface RecordSubscription<T = RecordModel> {\n    action: string; // eg. create, update, delete\n    record: T;\n}\n\nexport type OAuth2UrlCallback = (url: string) => void | Promise<void>;\n\nexport interface OAuth2AuthConfig extends SendOptions {\n    // the name of the OAuth2 provider (eg. \"google\")\n    provider: string;\n\n    // custom scopes to overwrite the default ones\n    scopes?: Array<string>;\n\n    // optional record create data\n    createData?: { [key: string]: any };\n\n    // optional callback that is triggered after the OAuth2 sign-in/sign-up url generation\n    urlCallback?: OAuth2UrlCallback;\n\n    // optional query params to send with the PocketBase auth request (eg. fields, expand, etc.)\n    query?: RecordOptions;\n}\n\nexport class RecordService<M = RecordModel> extends CrudService<M> {\n    readonly collectionIdOrName: string;\n\n    constructor(client: Client, collectionIdOrName: string) {\n        super(client);\n\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return this.baseCollectionPath + \"/records\";\n    }\n\n    /**\n     * Returns the current collection service base path.\n     */\n    get baseCollectionPath(): string {\n        return \"/api/collections/\" + encodeURIComponent(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Realtime handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Subscribe to realtime changes to the specified topic (\"*\" or record id).\n     *\n     * If `topic` is the wildcard \"*\", then this method will subscribe to\n     * any record changes in the collection.\n     *\n     * If `topic` is a record id, then this method will subscribe only\n     * to changes of the specified record id.\n     *\n     * It's OK to subscribe multiple times to the same topic.\n     * You can use the returned `UnsubscribeFunc` to remove only a single subscription.\n     * Or use `unsubscribe(topic)` if you want to remove all subscriptions attached to the topic.\n     */\n    async subscribe<T = M>(\n        topic: string,\n        callback: (data: RecordSubscription<T>) => void,\n        options?: SendOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error(\"Missing topic.\");\n        }\n\n        if (!callback) {\n            throw new Error(\"Missing subscription callback.\");\n        }\n\n        return this.client.realtime.subscribe(\n            this.collectionIdOrName + \"/\" + topic,\n            callback,\n            options,\n        );\n    }\n\n    /**\n     * Unsubscribe from all subscriptions of the specified topic\n     * (\"*\" or record id).\n     *\n     * If `topic` is not set, then this method will unsubscribe from\n     * all subscriptions associated to the current collection.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        // unsubscribe from the specified topic\n        if (topic) {\n            return this.client.realtime.unsubscribe(\n                this.collectionIdOrName + \"/\" + topic,\n            );\n        }\n\n        // unsubscribe from everything related to the collection\n        return this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Crud handers\n    // ---------------------------------------------------------------\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(options?: RecordFullListOptions): Promise<Array<T>>;\n\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(\n        batch?: number,\n        options?: RecordListOptions,\n    ): Promise<Array<T>>;\n\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(\n        batchOrOptions?: number | RecordFullListOptions,\n        options?: RecordListOptions,\n    ): Promise<Array<T>> {\n        if (typeof batchOrOptions == \"number\") {\n            return super.getFullList<T>(batchOrOptions, options);\n        }\n\n        const params = Object.assign({}, batchOrOptions, options);\n\n        return super.getFullList<T>(params);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getList<T = M>(\n        page = 1,\n        perPage = 30,\n        options?: RecordListOptions,\n    ): Promise<ListResult<T>> {\n        return super.getList<T>(page, perPage, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getFirstListItem<T = M>(\n        filter: string,\n        options?: RecordListOptions,\n    ): Promise<T> {\n        return super.getFirstListItem<T>(filter, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getOne<T = M>(id: string, options?: RecordOptions): Promise<T> {\n        return super.getOne<T>(id, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async create<T = M>(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): Promise<T> {\n        return super.create<T>(bodyParams, options);\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    async update<T = M>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): Promise<T> {\n        return super.update<RecordModel>(id, bodyParams, options).then((item) => {\n            if (\n                // is record auth\n                this.client.authStore.model?.id === item?.id &&\n                (this.client.authStore.model?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.model?.collectionName ===\n                        this.collectionIdOrName)\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        return super.delete(id, options).then((success) => {\n            if (\n                success &&\n                // is record auth\n                this.client.authStore.model?.id === id &&\n                (this.client.authStore.model?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.model?.collectionName ===\n                        this.collectionIdOrName)\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful collection authorization response.\n     */\n    protected authResponse<T = M>(responseData: any): RecordAuthResponse<T> {\n        const record = this.decode(responseData?.record || {});\n\n        this.client.authStore.save(responseData?.token, record as any);\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            token: responseData?.token || \"\",\n            record: record as any as T,\n        });\n    }\n\n    /**\n     * Returns all available collection auth methods.\n     *\n     * @throws {ClientResponseError}\n     */\n    async listAuthMethods(options?: CommonOptions): Promise<AuthMethodsList> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-methods\", options)\n            .then((responseData: any) => {\n                return Object.assign({}, responseData, {\n                    // normalize common fields\n                    usernamePassword: !!responseData?.usernamePassword,\n                    emailPassword: !!responseData?.emailPassword,\n                    authProviders: Array.isArray(responseData?.authProviders)\n                        ? responseData?.authProviders\n                        : [],\n                });\n            });\n    }\n\n    /**\n     * Authenticate a single auth collection record via its username/email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithPassword<T = M>(\n        usernameOrEmail: string,\n        password: string,\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authWithPassword(usernameOrEmail, password, options?).\n     */\n    async authWithPassword<T = M>(\n        usernameOrEmail: string,\n        password: string,\n        body?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>>;\n\n    async authWithPassword<T = M>(\n        usernameOrEmail: string,\n        password: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                identity: usernameOrEmail,\n                password: password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authWithPassword(usernameOrEmail, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(usernameOrEmail, pass, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-with-password\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Authenticate a single auth collection record with OAuth2 code.\n     *\n     * If you don't have an OAuth2 code you may also want to check `authWithOAuth2` method.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createdData, options?).\n     */\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        body?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>>;\n\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                provider: provider,\n                code: code,\n                codeVerifier: codeVerifier,\n                redirectUrl: redirectUrl,\n                createData: createData,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-with-oauth2\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * @deprecated This form of authWithOAuth2 is deprecated.\n     *\n     * Please use `authWithOAuth2Code()` OR its simplified realtime version\n     * as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\n     */\n    async authWithOAuth2<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        bodyParams?: { [key: string]: any },\n        queryParams?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * Authenticate a single auth collection record with OAuth2\n     * **without custom redirects, deeplinks or even page reload**.\n     *\n     * This method initializes a one-off realtime subscription and will\n     * open a popup window with the OAuth2 vendor page to authenticate.\n     * Once the external OAuth2 sign-in/sign-up flow is completed, the popup\n     * window will be automatically closed and the OAuth2 data sent back\n     * to the user through the previously established realtime connection.\n     *\n     * You can specify an optional `urlCallback` prop to customize\n     * the default url `window.open` behavior.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * Example:\n     *\n     * ```js\n     * const authData = await pb.collection(\"users\").authWithOAuth2({\n     *     provider: \"google\",\n     * })\n     * ```\n     *\n     * _Site-note_: when creating the OAuth2 app in the provider dashboard\n     * you have to configure `https://yourdomain.com/api/oauth2-redirect`\n     * as redirect URL.\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOAuth2<T = M>(\n        options: OAuth2AuthConfig,\n    ): Promise<RecordAuthResponse<T>>;\n\n    async authWithOAuth2<T = M>(...args: any): Promise<RecordAuthResponse<T>> {\n        // fallback to legacy format\n        if (args.length > 1 || typeof args?.[0] === \"string\") {\n            console.warn(\n                \"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\",\n            );\n            return this.authWithOAuth2Code<T>(\n                args?.[0] || \"\",\n                args?.[1] || \"\",\n                args?.[2] || \"\",\n                args?.[3] || \"\",\n                args?.[4] || {},\n                args?.[5] || {},\n                args?.[6] || {},\n            );\n        }\n\n        const config = args?.[0] || {};\n\n        const authMethods = await this.listAuthMethods();\n\n        const provider = authMethods.authProviders.find(\n            (p) => p.name === config.provider,\n        );\n        if (!provider) {\n            throw new ClientResponseError(\n                new Error(`Missing or invalid provider \"${config.provider}\".`),\n            );\n        }\n\n        const redirectUrl = this.client.buildUrl(\"/api/oauth2-redirect\");\n\n        // initialize a one-off realtime service\n        const realtime = new RealtimeService(this.client);\n\n        // open a new popup window in case config.urlCallback is not set\n        //\n        // note: it is opened before the async call due to Safari restrictions\n        // (see https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061)\n        let eagerDefaultPopup: Window | null = null;\n        if (!config.urlCallback) {\n            eagerDefaultPopup = openBrowserPopup(undefined);\n        }\n\n        function cleanup() {\n            eagerDefaultPopup?.close();\n            realtime.unsubscribe();\n        }\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                await realtime.subscribe(\"@oauth2\", async (e) => {\n                    const oldState = realtime.clientId;\n\n                    try {\n                        if (!e.state || oldState !== e.state) {\n                            throw new Error(\"State parameters don't match.\");\n                        }\n\n                        if (e.error || !e.code) {\n                            throw new Error(\n                                \"OAuth2 redirect error or missing code: \" + e.error,\n                            );\n                        }\n\n                        // clear the non SendOptions props\n                        const options = Object.assign({}, config);\n                        delete options.provider;\n                        delete options.scopes;\n                        delete options.createData;\n                        delete options.urlCallback;\n\n                        const authData = await this.authWithOAuth2Code<T>(\n                            provider.name,\n                            e.code,\n                            provider.codeVerifier,\n                            redirectUrl,\n                            config.createData,\n                            options,\n                        );\n\n                        resolve(authData);\n                    } catch (err) {\n                        reject(new ClientResponseError(err));\n                    }\n\n                    cleanup();\n                });\n\n                const replacements: { [key: string]: any } = {\n                    state: realtime.clientId,\n                };\n                if (config.scopes?.length) {\n                    replacements[\"scope\"] = config.scopes.join(\" \");\n                }\n\n                const url = this._replaceQueryParams(\n                    provider.authUrl + redirectUrl,\n                    replacements,\n                );\n\n                let urlCallback =\n                    config.urlCallback ||\n                    function (url: string) {\n                        if (eagerDefaultPopup) {\n                            eagerDefaultPopup.location.href = url;\n                        } else {\n                            // it could have been blocked due to its empty initial url,\n                            // try again...\n                            eagerDefaultPopup = openBrowserPopup(url);\n                        }\n                    };\n\n                await urlCallback(url);\n            } catch (err) {\n                cleanup();\n                reject(new ClientResponseError(err));\n            }\n        });\n    }\n\n    /**\n     * Refreshes the current authenticated record instance and\n     * returns a new token and record data.\n     *\n     * On success this method also automatically updates the client's AuthStore.\n     *\n     * @throws {ClientResponseError}\n     */\n    async authRefresh<T = M>(options?: RecordOptions): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authRefresh(options?).\n     */\n    async authRefresh<T = M>(body?: any, query?: any): Promise<RecordAuthResponse<T>>;\n\n    async authRefresh<T = M>(\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-refresh\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Sends auth record password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestPasswordReset(email, options?).\n     */\n    async requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestPasswordReset(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmPasswordReset(passwordResetToken, password, passwordConfirm, options?).\n     */\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: passwordResetToken,\n                password: password,\n                passwordConfirm: passwordConfirm,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends auth record verification email request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestVerification(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestVerification(email, options?).\n     */\n    async requestVerification(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestVerification(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-verification\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record email verification request.\n     *\n     * If the current `client.authStore.model` matches with the auth record from the token,\n     * then on success the `client.authStore.model.verified` will be updated to `true`.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmVerification(\n        verificationToken: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmVerification(verificationToken, options?).\n     */\n    async confirmVerification(\n        verificationToken: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmVerification(\n        verificationToken: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: verificationToken,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-verification\", options)\n            .then(() => {\n                // on success manually update the current auth record verified state\n                const payload = getTokenPayload(verificationToken);\n                const model = this.client.authStore.model;\n                if (\n                    model &&\n                    !model.verified &&\n                    model.id === payload.id &&\n                    model.collectionId === payload.collectionId\n                ) {\n                    model.verified = true;\n                    this.client.authStore.save(this.client.authStore.token, model);\n                }\n\n                return true;\n            });\n    }\n\n    /**\n     * Sends an email change request to the authenticated record model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestEmailChange(newEmail: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestEmailChange(newEmail, options?).\n     */\n    async requestEmailChange(newEmail: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestEmailChange(\n        newEmail: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                newEmail: newEmail,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-email-change\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record's new email address.\n     *\n     * If the current `client.authStore.model` matches with the auth record from the token,\n     * then on success the `client.authStore` will be cleared.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmEmailChange(emailChangeToken, password, options?).\n     */\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: emailChangeToken,\n                password: password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-email-change\", options)\n            .then(() => {\n                const payload = getTokenPayload(emailChangeToken);\n                const model = this.client.authStore.model;\n                if (\n                    model &&\n                    model.id === payload.id &&\n                    model.collectionId === payload.collectionId\n                ) {\n                    this.client.authStore.clear();\n                }\n\n                return true;\n            });\n    }\n\n    /**\n     * Lists all linked external auth providers for the specified auth record.\n     *\n     * @throws {ClientResponseError}\n     */\n    async listExternalAuths(\n        recordId: string,\n        options?: CommonOptions,\n    ): Promise<Array<ExternalAuthModel>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\n            this.baseCrudPath + \"/\" + encodeURIComponent(recordId) + \"/external-auths\",\n            options,\n        );\n    }\n\n    /**\n     * Unlink a single external auth provider from the specified auth record.\n     *\n     * @throws {ClientResponseError}\n     */\n    async unlinkExternalAuth(\n        recordId: string,\n        provider: string,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(\n                this.baseCrudPath +\n                    \"/\" +\n                    encodeURIComponent(recordId) +\n                    \"/external-auths/\" +\n                    encodeURIComponent(provider),\n                options,\n            )\n            .then(() => true);\n    }\n\n    // ---------------------------------------------------------------\n\n    // very rudimentary url query params replacement because at the moment\n    // URL (and URLSearchParams) doesn't seem to be fully supported in React Native\n    //\n    // note: for details behind some of the decode/encode parsing check https://unixpapa.com/js/querystring.html\n    private _replaceQueryParams(\n        url: string,\n        replacements: { [key: string]: any } = {},\n    ): string {\n        let urlPath = url;\n        let query = \"\";\n\n        const queryIndex = url.indexOf(\"?\");\n        if (queryIndex >= 0) {\n            urlPath = url.substring(0, url.indexOf(\"?\"));\n            query = url.substring(url.indexOf(\"?\") + 1);\n        }\n\n        const parsedParams: { [key: string]: string } = {};\n\n        // parse the query parameters\n        const rawParams = query.split(\"&\");\n        for (const param of rawParams) {\n            if (param == \"\") {\n                continue;\n            }\n\n            const pair = param.split(\"=\");\n            parsedParams[decodeURIComponent(pair[0].replace(/\\+/g, \" \"))] =\n                decodeURIComponent((pair[1] || \"\").replace(/\\+/g, \" \"));\n        }\n\n        // apply the replacements\n        for (let key in replacements) {\n            if (!replacements.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (replacements[key] == null) {\n                delete parsedParams[key];\n            } else {\n                parsedParams[key] = replacements[key];\n            }\n        }\n\n        // construct back the full query string\n        query = \"\";\n        for (let key in parsedParams) {\n            if (!parsedParams.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (query != \"\") {\n                query += \"&\";\n            }\n\n            query +=\n                encodeURIComponent(key.replace(/%20/g, \"+\")) +\n                \"=\" +\n                encodeURIComponent(parsedParams[key].replace(/%20/g, \"+\"));\n        }\n\n        return query != \"\" ? urlPath + \"?\" + query : urlPath;\n    }\n}\n\nfunction openBrowserPopup(url?: string): Window | null {\n    if (typeof window === \"undefined\" || !window?.open) {\n        throw new ClientResponseError(\n            new Error(\n                `Not in a browser context - please pass a custom urlCallback function.`,\n            ),\n        );\n    }\n\n    let width = 1024;\n    let height = 768;\n\n    let windowWidth = window.innerWidth;\n    let windowHeight = window.innerHeight;\n\n    // normalize window size\n    width = width > windowWidth ? windowWidth : width;\n    height = height > windowHeight ? windowHeight : height;\n\n    let left = windowWidth / 2 - width / 2;\n    let top = windowHeight / 2 - height / 2;\n\n    // note: we don't use the noopener and noreferrer attributes since\n    // for some reason browser blocks such windows then url is undefined/blank\n    return window.open(\n        url,\n        \"popup_window\",\n        \"width=\" +\n            width +\n            \",height=\" +\n            height +\n            \",top=\" +\n            top +\n            \",left=\" +\n            left +\n            \",resizable,menubar=no\",\n    );\n}\n", "import { CrudService } from \"@/services/utils/CrudService\";\nimport { CollectionModel } from \"@/services/utils/dtos\";\nimport { CommonOptions } from \"@/services/utils/options\";\n\nexport class CollectionService extends CrudService<CollectionModel> {\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return \"/api/collections\";\n    }\n\n    /**\n     * Imports the provided collections.\n     *\n     * If `deleteMissing` is `true`, all local collections and schema fields,\n     * that are not present in the imported configuration, WILL BE DELETED\n     * (including their related records data)!\n     *\n     * @throws {ClientResponseError}\n     */\n    async import(\n        collections: Array<CollectionModel>,\n        deleteMissing: boolean = false,\n        options?: CommonOptions,\n    ): Promise<true> {\n        options = Object.assign(\n            {\n                method: \"PUT\",\n                body: {\n                    collections: collections,\n                    deleteMissing: deleteMissing,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCrudPath + \"/import\", options).then(() => true);\n    }\n}\n", "import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseService } from \"@/services/utils/BaseService\";\nimport { ListResult, LogModel } from \"@/services/utils/dtos\";\nimport { CommonOptions, ListOptions, LogStatsOptions } from \"@/services/utils/options\";\n\nexport interface HourlyStats {\n    total: number;\n    date: string;\n}\n\nexport class LogService extends BaseService {\n    /**\n     * Returns paginated logs list.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getList(\n        page = 1,\n        perPage = 30,\n        options?: ListOptions,\n    ): Promise<ListResult<LogModel>> {\n        options = Object.assign({ method: \"GET\" }, options);\n\n        options.query = Object.assign(\n            {\n                page: page,\n                perPage: perPage,\n            },\n            options.query,\n        );\n\n        return this.client.send(\"/api/logs\", options);\n    }\n\n    /**\n     * Returns a single log by its id.\n     *\n     * If `id` is empty it will throw a 404 error.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getOne(id: string, options?: CommonOptions): Promise<LogModel> {\n        if (!id) {\n            throw new ClientResponseError({\n                url: this.client.buildUrl(\"/api/logs/\"),\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"Missing required log id.\",\n                    data: {},\n                },\n            });\n        }\n\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/logs/\" + encodeURIComponent(id), options);\n    }\n\n    /**\n     * Returns logs statistics.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getStats(options?: LogStatsOptions): Promise<Array<HourlyStats>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/logs/stats\", options);\n    }\n}\n", "import { BaseService } from \"@/services/utils/BaseService\";\nimport { CommonOptions } from \"@/services/utils/options\";\n\nexport interface HealthCheckResponse {\n    code: number;\n    message: string;\n    data: { [key: string]: any };\n}\n\nexport class HealthService extends BaseService {\n    /**\n     * Checks the health status of the api.\n     *\n     * @throws {ClientResponseError}\n     */\n    async check(options?: CommonOptions): Promise<HealthCheckResponse> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/health\", options);\n    }\n}\n", "import { BaseService } from \"@/services/utils/BaseService\";\nimport { CommonOptions, FileOptions } from \"@/services/utils/options\";\n\nexport class FileService extends BaseService {\n    /**\n     * Builds and returns an absolute record file url for the provided filename.\n     */\n    getUrl(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        if (\n            !filename ||\n            !record?.id ||\n            !(record?.collectionId || record?.collectionName)\n        ) {\n            return \"\";\n        }\n\n        const parts = [];\n        parts.push(\"api\");\n        parts.push(\"files\");\n        parts.push(encodeURIComponent(record.collectionId || record.collectionName));\n        parts.push(encodeURIComponent(record.id));\n        parts.push(encodeURIComponent(filename));\n\n        let result = this.client.buildUrl(parts.join(\"/\"));\n\n        if (Object.keys(queryParams).length) {\n            // normalize the download query param for consistency with the Dart sdk\n            if (queryParams.download === false) {\n                delete queryParams.download;\n            }\n\n            const params = new URLSearchParams(queryParams);\n\n            result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\n        }\n\n        return result;\n    }\n\n    /**\n     * Requests a new private file access token for the current auth model (admin or record).\n     *\n     * @throws {ClientResponseError}\n     */\n    async getToken(options?: CommonOptions): Promise<string> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(\"/api/files/token\", options)\n            .then((data) => data?.token || \"\");\n    }\n}\n", "import { BaseService } from \"@/services/utils/BaseService\";\nimport { CommonOptions } from \"@/services/utils/options\";\n\nexport interface BackupFileInfo {\n    key: string;\n    size: number;\n    modified: string;\n}\n\nexport class BackupService extends BaseService {\n    /**\n     * Returns list with all available backup files.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList(options?: CommonOptions): Promise<Array<BackupFileInfo>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups\", options);\n    }\n\n    /**\n     * Initializes a new backup.\n     *\n     * @throws {ClientResponseError}\n     */\n    async create(basename: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    name: basename,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups\", options).then(() => true);\n    }\n\n    /**\n     * Uploads an existing backup file.\n     *\n     * Example:\n     *\n     * ```js\n     * await pb.backups.upload({\n     *     file: new Blob([...]),\n     * });\n     * ```\n     *\n     * @throws {ClientResponseError}\n     */\n    async upload(\n        bodyParams: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups/upload\", options).then(() => true);\n    }\n\n    /**\n     * Deletes a single backup file.\n     *\n     * @throws {ClientResponseError}\n     */\n    async delete(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/backups/${encodeURIComponent(key)}`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Initializes an app data restore from an existing backup.\n     *\n     * @throws {ClientResponseError}\n     */\n    async restore(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/backups/${encodeURIComponent(key)}/restore`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Builds a download url for a single existing backup using an\n     * admin file token and the backup file key.\n     *\n     * The file token can be generated via `pb.files.getToken()`.\n     */\n    getDownloadUrl(token: string, key: string): string {\n        return this.client.buildUrl(\n            `/api/backups/${encodeURIComponent(key)}?token=${encodeURIComponent(token)}`,\n        );\n    }\n}\n", "import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseAuthStore } from \"@/stores/BaseAuthStore\";\nimport { LocalAuthStore } from \"@/stores/LocalAuthStore\";\nimport { SettingsService } from \"@/services/SettingsService\";\nimport { AdminService } from \"@/services/AdminService\";\nimport { RecordService } from \"@/services/RecordService\";\nimport { CollectionService } from \"@/services/CollectionService\";\nimport { LogService } from \"@/services/LogService\";\nimport { RealtimeService } from \"@/services/RealtimeService\";\nimport { HealthService } from \"@/services/HealthService\";\nimport { FileService } from \"@/services/FileService\";\nimport { BackupService } from \"@/services/BackupService\";\nimport { RecordModel } from \"@/services/utils/dtos\";\nimport {\n    SendOptions,\n    FileOptions,\n    normalizeUnknownQueryParams,\n} from \"@/services/utils/options\";\n\nexport interface BeforeSendResult {\n    [key: string]: any; // for backward compatibility\n    url?: string;\n    options?: { [key: string]: any };\n}\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n    /**\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n     */\n    baseUrl: string;\n\n    /**\n     * Hook that get triggered right before sending the fetch request,\n     * allowing you to inspect and modify the url and request options.\n     *\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n     *\n     * You can return a non-empty result object `{ url, options }` to replace the url and request options entirely.\n     *\n     * Example:\n     * ```js\n     * client.beforeSend = function (url, options) {\n     *     options.headers = Object.assign({}, options.headers, {\n     *         'X-Custom-Header': 'example',\n     *     });\n     *\n     *     return { url, options }\n     * };\n     * ```\n     */\n    beforeSend?: (\n        url: string,\n        options: SendOptions,\n    ) => BeforeSendResult | Promise<BeforeSendResult>;\n\n    /**\n     * Hook that get triggered after successfully sending the fetch request,\n     * allowing you to inspect/modify the response object and its parsed data.\n     *\n     * Returns the new Promise resolved `data` that will be returned to the client.\n     *\n     * Example:\n     * ```js\n     * client.afterSend = function (response, data) {\n     *     if (response.status != 200) {\n     *         throw new ClientResponseError({\n     *             url:      response.url,\n     *             status:   response.status,\n     *             response: { ... },\n     *         });\n     *     }\n     *\n     *     return data;\n     * };\n     * ```\n     */\n    afterSend?: (response: Response, data: any) => any;\n\n    /**\n     * Optional language code (default to `en-US`) that will be sent\n     * with the requests to the server as `Accept-Language` header.\n     */\n    lang: string;\n\n    /**\n     * A replaceable instance of the local auth store service.\n     */\n    authStore: BaseAuthStore;\n\n    /**\n     * An instance of the service that handles the **Settings APIs**.\n     */\n    readonly settings: SettingsService;\n\n    /**\n     * An instance of the service that handles the **Admin APIs**.\n     */\n    readonly admins: AdminService;\n\n    /**\n     * An instance of the service that handles the **Collection APIs**.\n     */\n    readonly collections: CollectionService;\n\n    /**\n     * An instance of the service that handles the **File APIs**.\n     */\n    readonly files: FileService;\n\n    /**\n     * An instance of the service that handles the **Log APIs**.\n     */\n    readonly logs: LogService;\n\n    /**\n     * An instance of the service that handles the **Realtime APIs**.\n     */\n    readonly realtime: RealtimeService;\n\n    /**\n     * An instance of the service that handles the **Health APIs**.\n     */\n    readonly health: HealthService;\n\n    /**\n     * An instance of the service that handles the **Backup APIs**.\n     */\n    readonly backups: BackupService;\n\n    private cancelControllers: { [key: string]: AbortController } = {};\n    private recordServices: { [key: string]: RecordService } = {};\n    private enableAutoCancellation: boolean = true;\n\n    constructor(baseUrl = \"/\", authStore?: BaseAuthStore | null, lang = \"en-US\") {\n        this.baseUrl = baseUrl;\n        this.lang = lang;\n        this.authStore = authStore || new LocalAuthStore();\n\n        // services\n        this.admins = new AdminService(this);\n        this.collections = new CollectionService(this);\n        this.files = new FileService(this);\n        this.logs = new LogService(this);\n        this.settings = new SettingsService(this);\n        this.realtime = new RealtimeService(this);\n        this.health = new HealthService(this);\n        this.backups = new BackupService(this);\n    }\n\n    /**\n     * Returns the RecordService associated to the specified collection.\n     *\n     * @param  {string} idOrName\n     * @return {RecordService}\n     */\n    collection<M = RecordModel>(idOrName: string): RecordService<M> {\n        if (!this.recordServices[idOrName]) {\n            this.recordServices[idOrName] = new RecordService(this, idOrName);\n        }\n\n        return this.recordServices[idOrName];\n    }\n\n    /**\n     * Globally enable or disable auto cancellation for pending duplicated requests.\n     */\n    autoCancellation(enable: boolean): Client {\n        this.enableAutoCancellation = !!enable;\n\n        return this;\n    }\n\n    /**\n     * Cancels single request by its cancellation key.\n     */\n    cancelRequest(requestKey: string): Client {\n        if (this.cancelControllers[requestKey]) {\n            this.cancelControllers[requestKey].abort();\n            delete this.cancelControllers[requestKey];\n        }\n\n        return this;\n    }\n\n    /**\n     * Cancels all pending requests.\n     */\n    cancelAllRequests(): Client {\n        for (let k in this.cancelControllers) {\n            this.cancelControllers[k].abort();\n        }\n\n        this.cancelControllers = {};\n\n        return this;\n    }\n\n    /**\n     * Constructs a filter expression with placeholders populated from a parameters object.\n     *\n     * Placeholder parameters are defined with the `{:paramName}` notation.\n     *\n     * The following parameter values are supported:\n     *\n     * - `string` (_single quotes are autoescaped_)\n     * - `number`\n     * - `boolean`\n     * - `Date` object (_stringified into the PocketBase datetime format_)\n     * - `null`\n     * - everything else is converted to a string using `JSON.stringify()`\n     *\n     * Example:\n     *\n     * ```js\n     * pb.collection(\"example\").getFirstListItem(pb.filter(\n     *    'title ~ {:title} && created >= {:created}',\n     *    { title: \"example\", created: new Date()}\n     * ))\n     * ```\n     */\n    filter(raw: string, params?: { [key: string]: any }): string {\n        if (!params) {\n            return raw;\n        }\n\n        for (let key in params) {\n            let val = params[key];\n            switch (typeof val) {\n                case \"boolean\":\n                case \"number\":\n                    val = \"\" + val;\n                    break;\n                case \"string\":\n                    val = \"'\" + val.replace(/'/g, \"\\\\'\") + \"'\";\n                    break;\n                default:\n                    if (val === null) {\n                        val = \"null\";\n                    } else if (val instanceof Date) {\n                        val = \"'\" + val.toISOString().replace(\"T\", \" \") + \"'\";\n                    } else {\n                        val = \"'\" + JSON.stringify(val).replace(/'/g, \"\\\\'\") + \"'\";\n                    }\n            }\n            raw = raw.replaceAll(\"{:\" + key + \"}\", val);\n        }\n\n        return raw;\n    }\n\n    /**\n     * Legacy alias of `pb.files.getUrl()`.\n     */\n    getFileUrl(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        return this.files.getUrl(record, filename, queryParams);\n    }\n\n    /**\n     * Builds a full client url by safely concatenating the provided path.\n     */\n    buildUrl(path: string): string {\n        let url = this.baseUrl;\n\n        // construct an absolute base url if in a browser environment\n        if (\n            typeof window !== \"undefined\" &&\n            !!window.location &&\n            !url.startsWith(\"https://\") &&\n            !url.startsWith(\"http://\")\n        ) {\n            url = window.location.origin?.endsWith(\"/\")\n                ? window.location.origin.substring(0, window.location.origin.length - 1)\n                : window.location.origin || \"\";\n\n            if (!this.baseUrl.startsWith(\"/\")) {\n                url += window.location.pathname || \"/\";\n                url += url.endsWith(\"/\") ? \"\" : \"/\";\n            }\n\n            url += this.baseUrl;\n        }\n\n        // concatenate the path\n        if (path) {\n            url += url.endsWith(\"/\") ? \"\" : \"/\"; // append trailing slash if missing\n            url += path.startsWith(\"/\") ? path.substring(1) : path;\n        }\n\n        return url;\n    }\n\n    /**\n     * Sends an api http request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async send<T = any>(path: string, options: SendOptions): Promise<T> {\n        options = this.initSendOptions(path, options);\n\n        // build url + path\n        let url = this.buildUrl(path);\n\n        if (this.beforeSend) {\n            const result = Object.assign({}, await this.beforeSend(url, options));\n            if (\n                typeof result.url !== \"undefined\" ||\n                typeof result.options !== \"undefined\"\n            ) {\n                url = result.url || url;\n                options = result.options || options;\n            } else if (Object.keys(result).length) {\n                // legacy behavior\n                options = result as SendOptions;\n                console?.warn &&\n                    console.warn(\n                        \"Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.\",\n                    );\n            }\n        }\n\n        // serialize the query parameters\n        if (typeof options.query !== \"undefined\") {\n            const query = this.serializeQueryParams(options.query);\n            if (query) {\n                url += (url.includes(\"?\") ? \"&\" : \"?\") + query;\n            }\n            delete options.query;\n        }\n\n        // ensures that the json body is serialized\n        if (\n            this.getHeader(options.headers, \"Content-Type\") == \"application/json\" &&\n            options.body &&\n            typeof options.body !== \"string\"\n        ) {\n            options.body = JSON.stringify(options.body);\n        }\n\n        const fetchFunc = options.fetch || fetch;\n\n        // send the request\n        return fetchFunc(url, options)\n            .then(async (response) => {\n                let data: any = {};\n\n                try {\n                    data = await response.json();\n                } catch (_) {\n                    // all api responses are expected to return json\n                    // with the exception of the realtime event and 204\n                }\n\n                if (this.afterSend) {\n                    data = await this.afterSend(response, data);\n                }\n\n                if (response.status >= 400) {\n                    throw new ClientResponseError({\n                        url: response.url,\n                        status: response.status,\n                        data: data,\n                    });\n                }\n\n                return data as T;\n            })\n            .catch((err) => {\n                // wrap to normalize all errors\n                throw new ClientResponseError(err);\n            });\n    }\n\n    /**\n     * Shallow copy the provided object and takes care to initialize\n     * any options required to preserve the backward compatability.\n     *\n     * @param  {SendOptions} options\n     * @return {SendOptions}\n     */\n    private initSendOptions(path: string, options: SendOptions): SendOptions {\n        options = Object.assign({ method: \"GET\" } as SendOptions, options);\n\n        // auto convert the body to FormData, if needed\n        options.body = this.convertToFormDataIfNeeded(options.body);\n\n        // move unknown send options as query parameters\n        normalizeUnknownQueryParams(options);\n\n        // requestKey normalizations for backward-compatibility\n        // ---\n        options.query = Object.assign({}, options.params, options.query);\n        if (typeof options.requestKey === \"undefined\") {\n            if (options.$autoCancel === false || options.query.$autoCancel === false) {\n                options.requestKey = null;\n            } else if (options.$cancelKey || options.query.$cancelKey) {\n                options.requestKey = options.$cancelKey || options.query.$cancelKey;\n            }\n        }\n        // remove the deprecated special cancellation params from the other query params\n        delete options.$autoCancel;\n        delete options.query.$autoCancel;\n        delete options.$cancelKey;\n        delete options.query.$cancelKey;\n        // ---\n\n        // add the json header, if not explicitly set\n        // (for FormData body the Content-Type header should be skipped since the boundary is autogenerated)\n        if (\n            this.getHeader(options.headers, \"Content-Type\") === null &&\n            !this.isFormData(options.body)\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                \"Content-Type\": \"application/json\",\n            });\n        }\n\n        // add Accept-Language header, if not explicitly set\n        if (this.getHeader(options.headers, \"Accept-Language\") === null) {\n            options.headers = Object.assign({}, options.headers, {\n                \"Accept-Language\": this.lang,\n            });\n        }\n\n        // check if Authorization header can be added\n        if (\n            // has valid token\n            this.authStore.token &&\n            // auth header is not explicitly set\n            this.getHeader(options.headers, \"Authorization\") === null\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                Authorization: this.authStore.token,\n            });\n        }\n\n        // handle auto cancelation for duplicated pending request\n        if (this.enableAutoCancellation && options.requestKey !== null) {\n            const requestKey = options.requestKey || (options.method || \"GET\") + path;\n\n            delete options.requestKey;\n\n            // cancel previous pending requests\n            this.cancelRequest(requestKey);\n\n            const controller = new AbortController();\n            this.cancelControllers[requestKey] = controller;\n            options.signal = controller.signal;\n        }\n\n        return options;\n    }\n\n    /**\n     * Converts analyzes the provided body and converts it to FormData\n     * in case a plain object with File/Blob values is used.\n     */\n    private convertToFormDataIfNeeded(body: any): any {\n        if (\n            typeof FormData === \"undefined\" ||\n            typeof body === \"undefined\" ||\n            typeof body !== \"object\" ||\n            body === null ||\n            this.isFormData(body) ||\n            !this.hasBlobField(body)\n        ) {\n            return body;\n        }\n\n        const form = new FormData();\n\n        for (const key in body) {\n            const val = body[key];\n\n            if (typeof val === \"object\" && !this.hasBlobField({ data: val })) {\n                // send json-like values as jsonPayload to avoid the implicit string value normalization\n                let payload: { [key: string]: any } = {};\n                payload[key] = val;\n                form.append(\"@jsonPayload\", JSON.stringify(payload));\n            } else {\n                // in case of mixed string and file/blob\n                const normalizedVal = Array.isArray(val) ? val : [val];\n                for (let v of normalizedVal) {\n                    form.append(key, v);\n                }\n            }\n        }\n\n        return form;\n    }\n\n    /**\n     * Checks if the submitted body object has at least one Blob/File field.\n     */\n    private hasBlobField(body: { [key: string]: any }): boolean {\n        for (const key in body) {\n            const values = Array.isArray(body[key]) ? body[key] : [body[key]];\n            for (const v of values) {\n                if (\n                    (typeof Blob !== \"undefined\" && v instanceof Blob) ||\n                    (typeof File !== \"undefined\" && v instanceof File)\n                ) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Extracts the header with the provided name in case-insensitive manner.\n     * Returns `null` if no header matching the name is found.\n     */\n    private getHeader(\n        headers: { [key: string]: string } | undefined,\n        name: string,\n    ): string | null {\n        headers = headers || {};\n        name = name.toLowerCase();\n\n        for (let key in headers) {\n            if (key.toLowerCase() == name) {\n                return headers[key];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Loosely checks if the specified body is a FormData instance.\n     */\n    private isFormData(body: any): boolean {\n        return (\n            body &&\n            // we are checking the constructor name because FormData\n            // is not available natively in some environments and the\n            // polyfill(s) may not be globally accessible\n            (body.constructor.name === \"FormData\" ||\n                // fallback to global FormData instance check\n                // note: this is needed because the constructor.name could be different in case of\n                //       custom global FormData implementation, eg. React Native on Android/iOS\n                (typeof FormData !== \"undefined\" && body instanceof FormData))\n        );\n    }\n\n    /**\n     * Serializes the provided query parameters into a query string.\n     */\n    private serializeQueryParams(params: { [key: string]: any }): string {\n        const result: Array<string> = [];\n        for (const key in params) {\n            if (params[key] === null) {\n                // skip null query params\n                continue;\n            }\n\n            const value = params[key];\n            const encodedKey = encodeURIComponent(key);\n\n            if (Array.isArray(value)) {\n                // repeat array params\n                for (const v of value) {\n                    result.push(encodedKey + \"=\" + encodeURIComponent(v));\n                }\n            } else if (value instanceof Date) {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value.toISOString()));\n            } else if (typeof value !== null && typeof value === \"object\") {\n                result.push(encodedKey + \"=\" + encodeURIComponent(JSON.stringify(value)));\n            } else {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value));\n            }\n        }\n\n        return result.join(\"&\");\n    }\n}\n", "import { BaseAuthStore, AuthModel } from \"@/stores/BaseAuthStore\";\n\nexport type AsyncSaveFunc = (serializedPayload: string) => Promise<void>;\n\nexport type AsyncClearFunc = () => Promise<void>;\n\ntype queueFunc = () => Promise<void>;\n\n/**\n * AsyncAuthStore is a helper auth store implementation\n * that could be used with any external async persistent layer\n * (key-value db, local file, etc.).\n *\n * Here is an example with the React Native AsyncStorage package:\n *\n * ```\n * import AsyncStorage from \"@react-native-async-storage/async-storage\";\n * import PocketBase, { AsyncAuthStore } from \"pocketbase\";\n *\n * const store = new AsyncAuthStore({\n *     save:    async (serialized) => AsyncStorage.setItem(\"pb_auth\", serialized),\n *     initial: AsyncStorage.getItem(\"pb_auth\"),\n * });\n *\n * const pb = new PocketBase(\"https://example.com\", store)\n * ```\n */\nexport class AsyncAuthStore extends BaseAuthStore {\n    private saveFunc: AsyncSaveFunc;\n    private clearFunc?: AsyncClearFunc;\n    private queue: Array<queueFunc> = [];\n\n    constructor(config: {\n        // The async function that is called every time\n        // when the auth store state needs to be persisted.\n        save: AsyncSaveFunc;\n\n        /// An *optional* async function that is called every time\n        /// when the auth store needs to be cleared.\n        ///\n        /// If not explicitly set, `saveFunc` with empty data will be used.\n        clear?: AsyncClearFunc;\n\n        // An *optional* initial data to load into the store.\n        initial?: string | Promise<any>;\n    }) {\n        super();\n\n        this.saveFunc = config.save;\n        this.clearFunc = config.clear;\n\n        this._enqueue(() => this._loadInitial(config.initial));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model?: AuthModel): void {\n        super.save(token, model);\n\n        let value = \"\";\n        try {\n            value = JSON.stringify({ token, model });\n        } catch (err) {\n            console.warn(\"AsyncAuthStore: failed to stringify the new state\");\n        }\n\n        this._enqueue(() => this.saveFunc(value));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear(): void {\n        super.clear();\n\n        if (this.clearFunc) {\n            this._enqueue(() => this.clearFunc!());\n        } else {\n            this._enqueue(() => this.saveFunc(\"\"));\n        }\n    }\n\n    /**\n     * Initializes the auth store state.\n     */\n    private async _loadInitial(payload?: string | Promise<any>) {\n        try {\n            payload = await payload;\n\n            if (payload) {\n                let parsed;\n                if (typeof payload === \"string\") {\n                    parsed = JSON.parse(payload) || {};\n                } else if (typeof payload === \"object\") {\n                    parsed = payload;\n                }\n\n                this.save(parsed.token || \"\", parsed.model || null);\n            }\n        } catch (_) {}\n    }\n\n    /**\n     * Appends an async function to the queue.\n     */\n    private _enqueue(asyncCallback: () => Promise<void>) {\n        this.queue.push(asyncCallback);\n\n        if (this.queue.length == 1) {\n            this._dequeue();\n        }\n    }\n\n    /**\n     * Starts the queue processing.\n     */\n    private _dequeue() {\n        if (!this.queue.length) {\n            return;\n        }\n\n        this.queue[0]().finally(() => {\n            this.queue.shift();\n\n            if (!this.queue.length) {\n                return;\n            }\n\n            this._dequeue();\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": ["ClientResponseError", "Error", "errData", "super", "this", "url", "status", "response", "isAbort", "originalError", "Object", "setPrototypeOf", "prototype", "data", "DOMException", "name", "message", "cause", "includes", "toJSON", "fieldContentRegExp", "cookieParse", "str", "options", "result", "decode", "assign", "defaultDecode", "index", "length", "eqIdx", "indexOf", "endIdx", "lastIndexOf", "key", "slice", "trim", "val", "charCodeAt", "_", "cookieSerialize", "opt", "encode", "defaultEncode", "test", "TypeError", "value", "maxAge", "isNaN", "isFinite", "Math", "floor", "domain", "path", "expires", "isDate", "toString", "call", "Date", "valueOf", "toUTCString", "httpOnly", "secure", "priority", "toLowerCase", "sameSite", "decodeURIComponent", "encodeURIComponent", "atobPolyfill", "getTokenPayload", "token", "encodedPayload", "split", "map", "c", "join", "JSON", "parse", "e", "isTokenExpired", "expirationThreshold", "payload", "keys", "exp", "now", "atob", "input", "String", "replace", "bs", "buffer", "bc", "idx", "output", "charAt", "fromCharCode", "defaultCookieKey", "BaseAuthStore", "constructor", "baseToken", "baseModel", "_onChangeCallbacks", "model", "isValid", "isAdmin", "type", "isAuthRecord", "triggerChange", "clear", "cookie", "rawData", "Array", "isArray", "save", "defaultOptions", "stringify", "resultLength", "Blob", "size", "id", "email", "extraProps", "prop", "callback", "fireImmediately", "push", "i", "splice", "LocalAuthStore", "storageKey", "storageFallback", "_bindStorageEvent", "_storageGet", "_storageSet", "_storageRemove", "window", "localStorage", "rawValue", "getItem", "normalizedVal", "setItem", "removeItem", "addEventListener", "BaseService", "client", "SettingsService", "method", "send", "bodyParams", "body", "filesystem", "then", "toEmail", "emailTemplate", "template", "clientId", "teamId", "keyId", "privateKey", "duration", "CrudService", "batchOrqueryParams", "_getFullList", "batch", "page", "perPage", "query", "baseCrudPath", "responseData", "items", "item", "filter", "requestKey", "skipTotal", "getList", "code", "buildUrl", "batchSize", "request", "async", "list", "concat", "normalizeLegacyOptionsArgs", "legacyWarn", "baseOptions", "bodyOrOptions", "hasQuery", "console", "warn", "resetAutoRefresh", "_resetAutoRefresh", "AdminService", "update", "authStore", "collectionId", "delete", "success", "admin", "password", "identity", "autoRefreshThreshold", "autoRefresh", "authData", "authResponse", "registerAutoRefresh", "threshold", "refreshFunc", "reauthenticateFunc", "oldBeforeSend", "beforeSend", "oldModel", "unsubStoreChange", "onChange", "newToken", "sendOptions", "oldToken", "headers", "authRefresh", "authWithPassword", "bind", "resetToken", "passwordConfirm", "knownSendOptionsKeys", "normalizeUnknownQueryParams", "RealtimeService", "eventSource", "subscriptions", "lastSentSubscriptions", "maxConnectTimeout", "reconnectAttempts", "maxReconnectAttempts", "Infinity", "predefinedReconnectIntervals", "pendingConnects", "isConnected", "topic", "serialized", "listener", "msgEvent", "submitSubscriptions", "connect", "unsubscribeByTopicAndListener", "needToSubmit", "subs", "getSubscriptionsByTopic", "hasSubscriptionListeners", "removeEventListener", "disconnect", "keyPrefix", "hasAtleastOneTopic", "startsWith", "exist", "keyToCheck", "addAllSubscriptionListeners", "getNonEmptySubscriptionKeys", "getSubscriptionsCancelKey", "catch", "err", "removeAllSubscriptionListeners", "Promise", "resolve", "reject", "initConnect", "clearTimeout", "connectTimeoutId", "setTimeout", "connectErrorHandler", "EventSource", "onerror", "lastEventId", "retries", "hasUnsentSubscriptions", "p", "reconnectTimeoutId", "connectSubs", "latestTopics", "t", "timeout", "fromReconnect", "cancelRequest", "close", "RecordService", "collectionIdOrName", "baseCollectionPath", "realtime", "subscribe", "unsubscribe", "unsubscribeByPrefix", "batchOrOptions", "getFullList", "params", "getFirstListItem", "getOne", "create", "collectionName", "record", "usernamePassword", "emailPassword", "authProviders", "usernameOrEmail", "provider", "codeVerifier", "redirectUrl", "createData", "args", "authWithOAuth2Code", "config", "listAuthMethods", "find", "eagerDefaultPopup", "cleanup", "urlCallback", "openBrowserPopup", "undefined", "oldState", "state", "error", "scopes", "replacements", "_replaceQueryParams", "authUrl", "location", "href", "passwordResetToken", "verificationToken", "verified", "newEmail", "emailChangeToken", "recordId", "urlPath", "substring", "parsedParams", "rawParams", "param", "pair", "hasOwnProperty", "open", "width", "height", "windowWidth", "innerWidth", "windowHeight", "innerHeight", "left", "top", "CollectionService", "collections", "deleteMissing", "LogService", "HealthService", "FileService", "filename", "queryParams", "parts", "download", "URLSearchParams", "BackupService", "basename", "Client", "baseUrl", "lang", "cancelControllers", "recordServices", "enableAutoCancellation", "admins", "files", "logs", "settings", "health", "backups", "idOrName", "enable", "abort", "cancelAllRequests", "k", "raw", "toISOString", "replaceAll", "getUrl", "origin", "endsWith", "pathname", "initSendOptions", "serializeQueryParams", "getHeader", "fetch", "json", "afterSend", "convertToFormDataIfNeeded", "$autoCancel", "$cancelKey", "isFormData", "Authorization", "controller", "AbortController", "signal", "FormData", "hasBlobField", "form", "v", "append", "values", "File", "encodedKey", "AsyncAuthStore", "queue", "saveFunc", "clearFunc", "_enqueue", "_loadInitial", "initial", "parsed", "asyncCallback", "_dequeue", "finally", "shift"]
}
